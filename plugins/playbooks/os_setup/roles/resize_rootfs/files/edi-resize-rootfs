#!/bin/bash

# Copyright (C) 2020 Matthias Luescher
#
# Authors:
#  Matthias Luescher
#
# Acknowledgement:
#  This script is based on the ideas of various open source developers.
#
# This file is part of the edi project configuration.
#
# This script is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This script is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with the edi project configuration.  If not, see <http://www.gnu.org/licenses/>.

# ----------------------------------------------------------------------------
# Usage:
#   ./resize-rootfs.sh                # dry-run by default
#   ./resize-rootfs.sh --no-dry-run   # actually apply changes
#
# Starting layout:
#   p1 = boot
#   p2 = rootfs (mounted at /)
#
# Goal:
#   - Resize p2 to double its current size.
#   - Create p3 of the same size (second rootfs).
#   - Create p4 with all remaining space (mounted at /data).
#
# ATTENTION: Resizing file systems can lead to data loss!
# ----------------------------------------------------------------------------

DRY_RUN=true
if [[ "${1:-}" == "--no-dry-run" ]]; then
    DRY_RUN=false
fi

set -o nounset
set -o errexit
set -o pipefail

print_and_exit()
{
    local TYPE=$1
    local MESSAGE=$2
    trap - EXIT
    if [ "${TYPE}" == "ERROR" ] ; then
        >&2 echo "error: ${MESSAGE}"
        exit 1
    else
        echo "${MESSAGE}"
        exit 0
    fi
}

abnormal_termination()
{
    print_and_exit "ERROR" "failed to resize rootfs due to abnormal script termination"
}

trap "abnormal_termination" EXIT

echo "Starting script to resize rootfs, create second rootfs, and create /data partition."

# 1) Check environment
if systemd-detect-virt --container > /dev/null ; then
    print_and_exit "INFO" "detected container virtualization - not going to modify rootfs"
fi

if [[ $EUID -ne 0 ]]; then
   print_and_exit "ERROR" "use root user to execute this script"
fi

# 2) Identify the root partition (e.g., mmcblk0p2)
ROOT_PART=$(mount | sed -n 's|^/dev/\(.*\) on / .*|\1|p')
if [ -z "${ROOT_PART}" ] ; then
    print_and_exit "ERROR" "unable to detect root partition device"
fi

ROOT_DEV=""
case "${ROOT_PART}" in
    mmcblk0p*) ROOT_DEV="mmcblk0" ;;
    sda[0-9]*) ROOT_DEV="sda" ;;
esac

if [ -z "${ROOT_DEV}" ] ; then
    print_and_exit "ERROR" "${ROOT_PART} does not look like an SD card or standard disk device."
fi

if [ "${ROOT_DEV}" = "${ROOT_PART}" ] ; then
    print_and_exit "ERROR" "${ROOT_PART} does not look like a partition (missing p#?)."
fi

PART_NUM=$(echo "${ROOT_PART}" | grep -o '[1-9][0-9]*$')
if [ -z "${PART_NUM}" ] ; then
    print_and_exit "ERROR" "Unable to extract the partition number from ${ROOT_PART}."
fi

# 3) Gather disk info using parted
PARTITION_INFO=$(parted /dev/${ROOT_DEV} -ms unit s print)

DISK_SIZE_S=$(echo "${PARTITION_INFO}" | grep "^/dev/${ROOT_DEV}" | cut -d':' -f2 | sed 's/s//g')
# We assume the *last line* from parted is the rootfs partition
ROOTFS_LINE=$(echo "${PARTITION_INFO}" | tail -n 1)

# Extract rootfs start & size (in sectors)
ROOTFS_START_S=$(echo "${ROOTFS_LINE}" | cut -d':' -f2 | sed 's/s//g')
ROOTFS_SIZE_S=$(echo "${ROOTFS_LINE}" | cut -d':' -f4 | sed 's/s//g')

# 4) Calculate new sizes
NEW_ROOTFS_SIZE_S=$(( ROOTFS_SIZE_S * 2 ))

TOTAL_ROOTFS_TAKE_S=$(( NEW_ROOTFS_SIZE_S + NEW_ROOTFS_SIZE_S ))

REMAINING_SIZE_S=$(( DISK_SIZE_S - ROOTFS_START_S - TOTAL_ROOTFS_TAKE_S ))

if [ "${REMAINING_SIZE_S}" -le 0 ] ; then
    print_and_exit "ERROR" "Not enough space to double rootfs, create second rootfs, and have leftover for /data."
fi

P3_START_S=$(( ROOTFS_START_S + NEW_ROOTFS_SIZE_S ))
P3_SIZE_S=${NEW_ROOTFS_SIZE_S}

P4_START_S=$(( P3_START_S + P3_SIZE_S ))
P4_SIZE_S=${REMAINING_SIZE_S}

# 5) Prepare an sfdisk script:
TEMP_PARTITION_TABLE=$(mktemp /tmp/partition-table.XXXXXX)

# Dump current layout
sfdisk -d /dev/${ROOT_DEV} > "${TEMP_PARTITION_TABLE}"

# remove line that describes last (root) partition
sed -i "/\/dev\/${ROOT_DEV}p${PART_NUM}/d" "${TEMP_PARTITION_TABLE}"

SECOND_PART_NUM=$(( PART_NUM + 1 ))  # typically 3 if PART_NUM was 2
THIRD_PART_NUM=$(( PART_NUM + 2 ))   # typically 4 if PART_NUM was 2

# 6) Append new definitions to the sfdisk table
cat << EOF >> "${TEMP_PARTITION_TABLE}"
/dev/${ROOT_DEV}p${PART_NUM}: start=${ROOTFS_START_S}, size=${NEW_ROOTFS_SIZE_S}, type=83
/dev/${ROOT_DEV}p${SECOND_PART_NUM}: start=${P3_START_S}, size=${P3_SIZE_S}, type=83
/dev/${ROOT_DEV}p${THIRD_PART_NUM}: start=${P4_START_S}, size=${P4_SIZE_S}, type=83
EOF

echo "------------------------------------------------------"
echo "Proposed new partition table:"
cat "${TEMP_PARTITION_TABLE}"
echo "------------------------------------------------------"

# 7) Write the partition table
if [ "${DRY_RUN}" = true ] ; then
    echo "[DRY-RUN]: Would run sfdisk --no-reread /dev/${ROOT_DEV}"
    sfdisk --no-reread --no-act /dev/${ROOT_DEV} < "${TEMP_PARTITION_TABLE}"
else
    echo "Applying new partition table to /dev/${ROOT_DEV}..."
    sfdisk --no-reread /dev/${ROOT_DEV} < "${TEMP_PARTITION_TABLE}"
    partprobe /dev/${ROOT_DEV}
fi

# 8) Resize old rootfs (p2), create p3, p4 filesystems, mount p4 at /data
if [ "${DRY_RUN}" = true ] ; then
    echo "[DRY-RUN]: Skipping resize2fs, mkfs, and mount operations."
else
    echo "Resizing filesystem on /dev/${ROOT_PART} (p2) to its new size..."
    resize2fs "/dev/${ROOT_PART}"

    echo "Creating ext4 filesystem on p3 (/dev/${ROOT_DEV}p${SECOND_PART_NUM})..."
    mkfs.ext4 "/dev/${ROOT_DEV}p${SECOND_PART_NUM}"

    echo "Creating ext4 filesystem on p4 (/dev/${ROOT_DEV}p${THIRD_PART_NUM})..."
    mkfs.ext4 "/dev/${ROOT_DEV}p${THIRD_PART_NUM}"

    echo "Mounting p4 (/dev/${ROOT_DEV}p${THIRD_PART_NUM}) at /data..."
    
    # Step 1: Prepare and copy data by temporary mounting the data partition
    TEMP_MOUNT="/mnt/newdata"
    mkdir -p "${TEMP_MOUNT}"
    mount "/dev/${ROOT_DEV}p${THIRD_PART_NUM}" "${TEMP_MOUNT}"
    cp -a /data/. "${TEMP_MOUNT}"
    umount "${TEMP_MOUNT}"

    # Step 2: Backup old data and set up the new mount point
    DATA_BACKUP="/data_old"
    mv /data "${DATA_BACKUP}"
    mkdir /data
    echo "/dev/mmcblk0p4 /data ext4 defaults 0 0" >> /etc/fstab
    mount -a

    # Step 3: Verify the copied content
    echo "Verifying copied content from /data to the new persistent partition"
    if diff -r --exclude="lost+found" "${DATA_BACKUP}" /data; then
        echo "Verification successful: Contents match."
        rm -rf "${DATA_BACKUP}"
    else
        print_and_exit "ERROR" "Verification failed: Contents differ."
    fi
fi

print_and_exit "INFO" "disk layout of ${ROOT_DEV} successfully changed. Resized p2, created p3, and mounted p4 at /data."

